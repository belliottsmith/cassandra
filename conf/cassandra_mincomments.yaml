# Cassandra storage config YAML v2.0
# This new version renames many of the old parameters
# For backward compatibility, Cassandra still works with the old version

# NOTE:
#   See https://cassandra.apache.org/doc/latest/configuration/ for
#   full explanations of configuration directives
# /NOTE

cluster:
  # The name of the cluster. This is mainly used to prevent machines in
  # one logical cluster from joining another.
  name: 'Test Cluster'
  partitioner: org.apache.cassandra.dht.Murmur3Partitioner

  tokens:
    num: 256
    # allocate_for_keyspace: KEYSPACE
    # allocate_for_local_replication_factor: 3

  snitch:
    type: SimpleSnitch
    dynamic:
      update_interval: 100ms
      reset_interval: 600000ms
      badness_threshold: 0.1

  seed_provider:
    - class_name: org.apache.cassandra.locator.SimpleSeedProvider
      parameters:
        - seeds: "127.0.0.1:7000"


network:
  timeouts:
    reads: 5000ms
    range_reads: 10000ms
    writes: 2000ms
    counter_writes: 5000ms
    cas_contention: 1000ms
    truncates: 60000ms
    default: 10000ms

  internode:
    listen_address: localhost
    # listen_interface: eth0
    # listen_interface_prefer_ipv6: false
    # broadcast_address: 1.2.3.4
    # listen_on_broadcast_address: false
    port: 7000
    authorizer: AllowAllNetworkAuthorizer
    # phi_convict_threshold: 8

    encryption:
      protect: none # none, dc, rack, all
      # optional: true
      bind_legacy_ssl_storage_port: false
      keystore: conf/.keystore
      keystore_password: cassandra
      verify: false                    # Verify peer server certificates
      truststore: conf/.truststore
      truststore_password: cassandra
      verify_name: false               # Verify that the host name in the certificate matches the connected host
      # protocol: TLS
      # store_type: JKS
      # cipher_suites: [
      #   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
      #   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
      #   TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA,
      #   TLS_RSA_WITH_AES_256_CBC_SHA
      # ]

    timeouts:
        # tcp_connect: 2000ms
        # tcp_user: 30000ms

    capacities:
      system:
          # send_buffer:
          # recv_buffer:

      application:
        # send_queue: 4MiB
        # send_queue_endpoint_reserve: 128MiB
        # send_queue_global_reserve: 512MiB
        # recv_queue: 4MiB
        # recv_queue_endpoint_reserve: 128MiB
        # recv_queue_global_reserve: 512MiB

    compression: dc    # all, dc, none
    tcp_nodelay: local # all, local (dc), none

    streaming:
      throughput:
        outbound: 200mbps
        interdc: 200mbps
      # keep_alive_period: 300s
      # connections_per_host: 1
      # entire_sstables: true

  client:
    # The address or interface to bind the native transport server to.
    #
    # Set rpc_address OR rpc_interface, not both.
    #
    # Leaving rpc_address blank has the same effect as on listen_address
    # (i.e. it will be based on the configured hostname of the node).
    #
    # Note that unlike listen_address, you can specify 0.0.0.0, but you must also
    # set broadcast_rpc_address to a value other than 0.0.0.0.
    #
    # For security reasons, you should not expose this port to the internet.  Firewall it if needed.
    address: localhost

    # Set rpc_address OR rpc_interface, not both. Interfaces must correspond
    # to a single address, IP aliasing is not supported.
    # interface: eth1

    # If you choose to specify the interface by name and the interface has an ipv4 and an ipv6 address
    # you can specify which should be chosen using rpc_interface_prefer_ipv6. If false the first ipv4
    # address will be used. If true the first ipv6 address will be used. Defaults to false preferring
    # ipv4. If there is only one address it will be selected regardless of ipv4/ipv6.
    # prefer_ipv6: false

    # RPC address to broadcast to drivers and other Cassandra nodes. This cannot
    # be set to 0.0.0.0. If left blank, this will be set to the value of
    # rpc_address. If rpc_address is set to 0.0.0.0, broadcast_rpc_address must
    # be set.
    # broadcast: 1.2.3.4

    accept: true
    # port for the CQL native transport to listen for clients on
    # For security reasons, you should not expose this port to the internet.  Firewall it if needed.
    port: 9042
    # Enabling native transport encryption in client_encryption_options allows you to either use
    # encryption for the standard port or to use a dedicated, additional port along with the unencrypted
    # standard port.
    # Enabling client encryption and keeping ssl_port disabled will use encryption for port. Setting
    # ssl_port to a different value from port will use encryption for ssl_port while
    # keeping native_transport_port unencrypted.
    # ssl_port: 9142

    # The maximum size of allowed frame. Frame (requests) larger than this will
    # be rejected as invalid. The default is 256MB. If you're changing this parameter,
    # you may want to adjust max_value_size accordingly. This should be positive and less than 2048.
    # max_frame_size: 256mb

    # If checksumming is enabled as a protocol option, denotes the size of the chunks into which frame
    # are bodies will be broken and checksummed.
    # frame_block_size: 32kb

    # Controls whether Cassandra honors older, yet currently supported, protocol versions.
    # The default is true, which means all supported protocols will be honored.
    allow_older_protocols: true

    # Controls when idle client connections are closed. Idle connections are ones that had neither reads
    # nor writes for a time period.
    #
    # Clients may implement heartbeats by sending OPTIONS native protocol message after a timeout, which
    # will reset idle timeout timer on the server side. To close idle client connections, corresponding
    # values for heartbeat intervals have to be set on the client side.
    #
    # Idle connection timeouts are disabled by default.
    # idle_timeout: 60000ms

    # The maximum number of client connections.
    # The default is -1, which means unlimited.
    # max_connections: -1

    # The maximum number of client connections per source ip.
    # The default is -1, which means unlimited.
    # max_connections_per_ip: -1

    # enable or disable keepalive on rpc/native connections
    keepalive: true

    # Configure client-to-server encryption.
    #
    # **NOTE** this default configuration is an insecure configuration. If you need to
    # enable client-to-server encryption generate server keystores (and truststores for mutual
    # authentication) per:
    # http://download.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html#CreateKeystore
    # Then perform the following configuration changes:
    #
    # Step 1: Set enabled=true and explicitly set optional=true. Restart all nodes
    #
    # Step 2: Set optional=false (or remove it) and if you generated truststores and want to use mutual
    # auth set require_client_auth=true. Restart all nodes
    encryption:
      # Enable client-to-server encryption
      enabled: false
      # When set to true, encrypted and unencrypted connections are allowed on the native_transport_port
      # This should _only be true_ while in unencrypted or transitional operation
      # optional defaults to true when enabled is false, and false when enabled is true.
      # optional: true
      # Set keystore and keystore_password to valid keystores if enabled is true
      keystore: conf/.keystore
      keystore_password: cassandra
      # Verify client certificates
      authenticate: false
      # Set trustore and truststore_password if authenticate is true
      # truststore: conf/.truststore
      # truststore_password: cassandra
      # More advanced defaults:
      # protocol: TLS
      # store_type: JKS
      # cipher_suites: [
      #   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
      #   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
      #   TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA,
      #   TLS_RSA_WITH_AES_256_CBC_SHA
      # ]


concurrency:
  reads: 32
  writes: 32
  counter_writes: 32
  # materialized_view_writes: 32

  clients: 128
  hint_delivery: 2

  # flush: 2          # Memtable flushes (default: 2 per data directory)
  # compaction: 1     # Compactions, excluding validation and repair (default: 2<=min(#disks,#cores)<=8)
  # repair: 0         # Number of simultaneous repair validations to allow


disk:
  # strategy: ssd               # ssd or spinning (default: ssd)
  data_failure_policy: stop     # on data disk failure: die, stop, stop_paranoid, best_effort
  commit_failure_policy: stop   # on commit disk failure: die, stop, stop_commit, ignore

  throttle:
    batchlog: 1MiB/s            # total for node; peers receive proportional share
    compaction: 16MiB/s
    hint_delivery: 1MiB/s

  directories:
    data:
      #     - /var/lib/cassandra/data
    # hints: /var/lib/cassandra/hints

    # saved_caches: /var/lib/cassandra/saved_caches

  commitlog:
    # directory: /var/lib/cassandra/commitlog
    sync: periodic                 # batch or periodic (default: periodic)
    sync_period: 10000ms           # interval between periodic syncs
    # sync_group_window: 1000ms    # wait at least this long between syncs (for sync: batch only)
    # max_lag:                     # in periodic mode, the maximum delay to the following sync before writes are blocked
    segment_size: 32mb             # individual file size; max_mutation_size must be no more than half this value
    # target_size: 8192mb
    # compression:
    #   - class_name: LZ4Compressor
    #     parameters:

  flush:
    # compression: fast             # none, fast, table (default: table)

  compaction_replacement_interval: 50mb  # large compactions will transfer reads to replacement file at this interval
  trickle_fsync: false
  trickle_fsync_interval: 10240kb

memory:
  memtable:
    # heap_space: 2048mb
    # offheap_space: 2048mb
    allocation_type: heap_buffers  # heap_buffers, offheap_buffers, offheap_objects

  chunk_cache:
    # size: 512mb
    # use_heap_if_exhausted: true
  prepared_statements_cache:
    size:

  row_cache:
    # class_name: org.apache.cassandra.cache.OHCProvider
    size: 0mb
    save_period: 0
    # keys_to_save: 100

  key_cache:
    size:
    row_index_limit: 2kb
    save_period: 14400
    # keys_to_save: 100

  counter_cache:
    size:
    save_period: 7200
    # keys_to_save: 100

  index_summaries:
    target_capacity:
    resample_interval: 60m

system:
  windows_timer_interval: 1

features:
  # UDFs (user defined functions) are disabled by default.
  # As of Cassandra 3.0 there is a sandbox in place that should prevent execution of evil code.
  user_defined_functions_enabled: false

  # Enables scripted UDFs (JavaScript UDFs).
  # Java UDFs are always enabled, if user_defined_functions_enabled is true.
  # Enable this option to be able to use UDFs with "language javascript" or any custom JSR-223 provider.
  # This option has no effect, if user_defined_functions_enabled is false.
  scripted_user_defined_functions_enabled: false

  cdc:
    enabled: false
    # total_space: 4096mb
    # free_space_check_interval: 250ms
    # raw_directory: /var/lib/cassandra/cdc_raw

  #########################
  # 6) EXPERIMENTAL FEATURES #
  #########################
  materialized_views_enabled: false

  # Enables SASI index creation on this node.
  # SASI indexes are considered experimental and are not recommended for production use.
  sasi_indexes_enabled: false

  transient_replication:
    # Enables creation of transiently replicated keyspaces on this node.
    # Transient replication is experimental and is not recommended for production use.
    enabled: false


# Set to true to have Cassandra create a hard link to each sstable
# flushed or streamed locally in a backups/ subdirectory of the
# keyspace data.  Removing these links is the operator's
# responsibility.
incremental_backups: false

# Whether or not to take a snapshot before each compaction.  Be
# careful using this option, since Cassandra won't clean up the
# snapshots for you.  Mostly useful if you're paranoid when there
# is a data format change.
snapshot_before_compaction: false

############################
# Cache and index settings #
############################
# Granularity of the collation index of rows within a partition.
# Increase if your rows are large, or if you have a very large
# number of rows per partition.  The competing goals are these:
#
# - a smaller granularity means more index entries are generated
#   and looking up rows withing the partition by collation column
#   is faster
# - but, Cassandra will keep the collation index in memory for hot
#   rows (as part of the key cache), so a larger granularity means
#   you can cache more hot rows
column_index_size: 64kb

thresholds:
  info:
    # Log INFO when threshold breached
    gc_pause: 200ms                   # time process is paused for GC

  warn:
    # Log a warning when thresholds are breached

    # System thresholds
    gc_pause: 1000ms                  # time process is paused for GC

    # Query thresholds
    large_partition: 100mb
    tombstones: 1000
    batch_size: 5kb                   # multi-partition batch, logged or unlogged
    partitions_in_unlogged_batch: 10  #

  fail:
    # Fail a query exceeding one of these thresholds
    # These are important for system stability, and should be revisited only with expert knowledge
    tombstones: 100000                # number encountered serving a read
    batch_size: 50kb                  # multi-partition batch, logged or unlogged
    # corrupt_value_size: 256mb         # Maximum size of any value in data files; larger values will be treated as corruption.
    slow_query: 500ms


# TTL for different trace types used during logging of the repair process.
tracetype_query_ttl: 86400
tracetype_repair_ttl: 604800

#####################################
# Advanced automatic backup setting #
#####################################
# Whether or not a snapshot is taken of the data before keyspace truncation
# or dropping of column families. The STRONGLY advised default of true
# should be used to provide data safety. If you set this flag to false, you will
# lose data on truncation or drop.
auto_snapshot: true



# Audit logging - Logs every incoming CQL command request, authentication to a node. See the docs
# on audit_logging for full details about the various configuration options.
audit_logging_options:
  enabled: false
  logger:
    - class_name: BinAuditLogger
  # audit_logs_dir:
  # included_keyspaces:
  # excluded_keyspaces: system, system_schema, system_virtual_schema
  # included_categories:
  # excluded_categories:
  # included_users:
  # excluded_users:
  # roll_cycle: HOURLY
  # block: true
  # max_queue_weight: 268435456 # 256 MiB
  # max_log_size: 17179869184 # 16 GiB
  ## archive command is "/path/to/script.sh %path" where %path is replaced with the file being rolled:
  # archive_command:
  # max_archive_retries: 10


# default options for full query logging - these can be overridden from command line when executing
# nodetool enablefullquerylog
#full_query_logging_options:
  # log_dir:
  # roll_cycle: HOURLY
  # block: true
  # max_queue_weight: 268435456 # 256 MiB
  # max_log_size: 17179869184 # 16 GiB
  ## archive command is "/path/to/script.sh %path" where %path is replaced with the file being rolled:
  # archive_command:
  # max_archive_retries: 10

# validate tombstones on reads and compaction
# can be either "disabled", "warn" or "exception"
# corrupted_tombstone_strategy: disabled

# Diagnostic Events #
# If enabled, diagnostic events can be helpful for troubleshooting operational issues. Emitted events contain details
# on internal state and temporal relationships across events, accessible by clients via JMX.
diagnostic_events_enabled: false

# Use native transport TCP message coalescing. If on upgrade to 4.0 you found your throughput decreasing, and in
# particular you run an old kernel or have very fewer client connections, this option might be worth evaluating.
# native_transport_flush_in_batches_legacy: false

# Limit memory usage for Merkle tree calculations during repairs. The default
# is 1/16th of the available heap. The main tradeoff is that smaller trees
# have less resolution, which can lead to over-streaming data. If you see heap
# pressure during repairs, consider lowering this, but you cannot go below
# one megabyte. If you see lots of over-streaming, consider raising
# this or using subrange repair.
#
# For more details see https://issues.apache.org/jira/browse/CASSANDRA-14096.
#
# repair_session_space:

# Enable tracking of repaired state of data during reads and comparison between replicas
# Mismatches between the repaired sets of replicas can be characterized as either confirmed
# or unconfirmed. In this context, unconfirmed indicates that the presence of pending repair
# sessions, unrepaired partition tombstones, or some other condition means that the disparity
# cannot be considered conclusive. Confirmed mismatches should be a trigger for investigation
# as they may be indicative of corruption or data loss.
# There are separate flags for range vs partition reads as single partition reads are only tracked
# when CL > 1 and a digest mismatch occurs. Currently, range queries don't use digests so if
# enabled for range reads, all range reads will include repaired data tracking. As this adds
# some overhead, operators may wish to disable it whilst still enabling it for partition reads
repaired_data_tracking_for_range_reads_enabled: false
repaired_data_tracking_for_partition_reads_enabled: false
# If false, only confirmed mismatches will be reported. If true, a separate metric for unconfirmed
# mismatches will also be recorded. This is to avoid potential signal:noise issues are unconfirmed
# mismatches are less actionable than confirmed ones.
report_unconfirmed_repaired_data_mismatches: false

#####################################
# Advanced fault detection settings #
#####################################
# Track a metric per keyspace indicating whether replication achieved the ideal consistency
# level for writes without timing out. This is different from the consistency level requested by
# each write which may be lower in order to facilitate availability.
# ideal_consistency_level: EACH_QUORUM

# Automatically upgrade sstables after upgrade - if there is no ordinary compaction to do, the
# oldest non-upgraded sstable will get upgraded to the latest version
# automatic_sstable_upgrade: false
# Limit the number of concurrent sstable upgrades
# max_concurrent_automatic_sstable_upgrades: 1

# See http://wiki.apache.org/cassandra/HintedHandoff
hinted_handoff:
  # May either be "true" or "false" to enable globally
  enabled: true

  # When hinted_handoff_enabled is true, a black list of data centers that will not
  # perform hinted handoff
  # disabled_datacenters:
  #   - DC1
  #   - DC2

  # this defines the maximum amount of time a dead host will have hints
  # generated.  After it has been dead this long, new hints for it will not be
  # created until it has been seen alive and gone down again.
  max_hint_window: 10800000ms # 3 hours

  # Directory where Cassandra should store hints.
  # If not set, the default directory is $CASSANDRA_HOME/data/hints.
  # hints_directory: /var/lib/cassandra/hints

  # How often hints should be flushed from the internal buffers to disk.
  # Will *not* trigger fsync.
  flush_period: 10000ms

  # Maximum size for a single hints file, in megabytes.
  max_hints_file_size: 128mb

  # Compression to apply to the hint files. If omitted, hints files
  # will be written uncompressed. LZ4, Snappy, and Deflate compressors
  # are supported.
  # compression:
  #   - class_name: LZ4Compressor
  #   parameters:
  #     -

##########################
# 6) Security properties #
##########################
# Authentication backend, implementing IAuthenticator; used to identify users
# Out of the box, Cassandra provides org.apache.cassandra.auth.{AllowAllAuthenticator,
# PasswordAuthenticator}.
#
# - AllowAllAuthenticator performs no checks - set it to disable authentication.
# - PasswordAuthenticator relies on username/password pairs to authenticate
#   users. It keeps usernames and hashed passwords in system_auth.roles table.
#   Please increase system_auth keyspace replication factor if you use this authenticator.
#   If using PasswordAuthenticator, CassandraRoleManager must also be used (see below)
authenticator: AllowAllAuthenticator

# Internode authentication backend, implementing IInternodeAuthenticator;
# used to allow/disallow connections from peer nodes.
# internode_authenticator: org.apache.cassandra.auth.AllowAllInternodeAuthenticator

# Authorization backend, implementing IAuthorizer; used to limit access/provide permissions
# Out of the box, Cassandra provides org.apache.cassandra.auth.{AllowAllAuthorizer,
# CassandraAuthorizer}.
#
# - AllowAllAuthorizer allows any action to any user - set it to disable authorization.
# - CassandraAuthorizer stores permissions in system_auth.role_permissions table. Please
#   increase system_auth keyspace replication factor if you use this authorizer.
authorizer: AllowAllAuthorizer

# Part of the Authentication & Authorization backend, implementing IRoleManager; used
# to maintain grants and memberships between roles.
# Out of the box, Cassandra provides org.apache.cassandra.auth.CassandraRoleManager,
# which stores role information in the system_auth keyspace. Most functions of the
# IRoleManager require an authenticated login, so unless the configured IAuthenticator
# actually implements authentication, most of this functionality will be unavailable.
#
# - CassandraRoleManager stores role data in the system_auth keyspace. Please
#   increase system_auth keyspace replication factor if you use this role manager.
role_manager: CassandraRoleManager

# Validity period for roles cache (fetching granted roles can be an expensive
# operation depending on the role manager, CassandraRoleManager is one example)
# Granted roles are cached for authenticated sessions in AuthenticatedUser and
# after the period specified here, become eligible for (async) reload.
# Defaults to 2000, set to 0 to disable caching entirely.
# Will be disabled automatically for AllowAllAuthenticator.
roles_validity: 2000ms

# Refresh interval for roles cache (if enabled).
# After this interval, cache entries become eligible for refresh. Upon next
# access, an async reload is scheduled and the old value returned until it
# completes. If roles_validity_in_ms is non-zero, then this must be
# also.
# Defaults to the same value as roles_validity.
# roles_update_interval: 2000ms

# Validity period for permissions cache (fetching permissions can be an
# expensive operation depending on the authorizer, CassandraAuthorizer is
# one example). Defaults to 2000, set to 0 to disable.
# Will be disabled automatically for AllowAllAuthorizer.
permissions_validity: 2000ms

# Refresh interval for permissions cache (if enabled).
# After this interval, cache entries become eligible for refresh. Upon next
# access, an async reload is scheduled and the old value returned until it
# completes. If permissions_validity_in_ms is non-zero, then this must be
# also.
# Defaults to the same value as permissions_validity.
# permissions_update_interval: 2000ms

# Validity period for credentials cache. This cache is tightly coupled to
# the provided PasswordAuthenticator implementation of IAuthenticator. If
# another IAuthenticator implementation is configured, this cache will not
# be automatically used and so the following settings will have no effect.
# Please note, credentials are cached in their encrypted form, so while
# activating this cache may reduce the number of queries made to the
# underlying table, it may not  bring a significant reduction in the
# latency of individual authentication attempts.
# Defaults to 2000, set to 0 to disable credentials caching.
credentials_validity: 2000ms

# Refresh interval for credentials cache (if enabled).
# After this interval, cache entries become eligible for refresh. Upon next
# access, an async reload is scheduled and the old value returned until it
# completes. If credentials_validity is non-zero, then this must be
# also.
# Defaults to the same value as credentials_validity.
# credentials_update_interval: 2000ms


########################
# 4) Advanced settings #
########################
# Enables encrypting data at-rest (on disk). Different key providers can be plugged in, but the default reads from
# a JCE-style keystore. A single keystore can hold multiple keys, but the one referenced by
# the "key_alias" is the only key that will be used for encrypt opertaions; previously used keys
# can still (and should!) be in the keystore and will be used on decrypt operations
# (to handle the case of key rotation).
#
# It is strongly recommended to download and install Java Cryptography Extension (JCE)
# Unlimited Strength Jurisdiction Policy Files for your version of the JDK.
# (current link: http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html)
#
# Currently, only the following file types are supported for transparent data encryption, although
# more are coming in future cassandra releases: commitlog, hints
transparent_data_encryption_options:
  enabled: false
  chunk_length_kb: 64
  cipher: AES/CBC/PKCS5Padding
  key_alias: testing:1
  # CBC IV length for AES needs to be 16 bytes (which is also the default size)
  # iv_length: 16
  key_provider:
    - class_name: org.apache.cassandra.security.JKSKeyProvider
      parameters:
        - keystore: conf/.keystore
          keystore_password: cassandra
          store_type: JCEKS
          key_password: cassandra

# SSL port, for legacy encrypted communication. This property is unused unless enabled in
# internode_encryption_options(see below). As of cassandra 4.0, this property is deprecated
# as a single port can be used for either/both secure and insecure connections.
# For security reasons, you should not expose this port to the internet. Firewall it if needed.
ssl_storage_port: 7001

