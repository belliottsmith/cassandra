# Cassandra storage config YAML v2.0
# This new version renames many of the old parameters
# For backward compatibility, Cassandra still works with the old version

# NOTE:
#   See https://cassandra.apache.org/doc/latest/configuration/ for
#   full explanations of configuration directives
# /NOTE

cluster:
  # The name of the cluster. This is mainly used to prevent machines in
  # one logical cluster from joining another.
  name: 'Test Cluster'
  partitioner: org.apache.cassandra.dht.Murmur3Partitioner

  tokens:
    num: 256
    # allocate_for_keyspace: KEYSPACE
    # allocate_for_local_replication_factor: 3

  snitch:
    type: SimpleSnitch
    dynamic:
      update_interval: 100ms
      reset_interval: 600000ms
      badness_threshold: 0.1

  seed_provider:
    - class_name: org.apache.cassandra.locator.SimpleSeedProvider
      parameters:
        - seeds: "127.0.0.1:7000"

network:
  peer:
    listen_address: localhost
    # listen_interface: eth0
    # listen_interface_prefer_ipv6: false
    # broadcast_address: 1.2.3.4
    # listen_on_broadcast_address: false
    port: 7000
    authorizer: AllowAllNetworkAuthorizer
    compression: dc    # all, dc, none
    tcp_nodelay: local # all, local (dc), none
    # phi_convict_threshold: 8

    encryption:
      protect: none # none, dc, rack, all
      # optional: true
      bind_legacy_ssl_storage_port: false
      keystore: conf/.keystore
      keystore_password: cassandra
      authenticate: false                    # Verify peer server certificates
      truststore: conf/.truststore
      truststore_password: cassandra
      authenticate_name: false               # Verify that the host name in the certificate matches the connected host
      # protocol: TLS
      # store_type: JKS
      # cipher_suites: [
      #   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
      #   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
      #   TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA,
      #   TLS_RSA_WITH_AES_256_CBC_SHA
      # ]

    streaming:
      # keep_alive_period: 300s
      # connections_per_host: 1
      # entire_sstables: true

  client:
    listen: localhost
    # interface: eth1
    # prefer_ipv6: false
    # broadcast: 1.2.3.4

    accept: true
    port: 9042
    # ssl_port: 9142
    # max_frame_size: 256mb
    # frame_block_size: 32kb
    allow_older_protocols: true
    # idle_timeout: 60000ms
    # max_connections: -1
    # max_connections_per_ip: -1
    keepalive: true
    encryption:
      # Enable client-to-server encryption
      enabled: false
      keystore: conf/.keystore
      keystore_password: cassandra
      authenticate: false
      # Set trustore and truststore_password if authenticate is true
      # truststore: conf/.truststore
      # truststore_password: cassandra
      # protocol: TLS
      # store_type: JKS
      # cipher_suites: [
      #   TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
      #   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
      #   TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA,
      #   TLS_RSA_WITH_AES_256_CBC_SHA
      # ]

disk:
  # strategy: ssd               # ssd or spinning (default: ssd)

  directories:
    data:
    #     - /var/lib/cassandra/data
    # hints: /var/lib/cassandra/hints
    # saved_caches: /var/lib/cassandra/saved_caches

  commitlog:
    # directory: /var/lib/cassandra/commitlog
    sync: periodic                 # batch or periodic (default: periodic)
    sync_period: 10000ms           # interval between periodic syncs
    # sync_group_window: 1000ms    # wait at least this long between syncs (for sync: batch only)
    # max_lag:                     # in periodic mode, the maximum delay to the following sync before writes are blocked
    segment_size: 32mb             # individual file size; max_mutation_size must be no more than half this value
    # target_size: 8192mb
    # compression:
    #   - class_name: LZ4Compressor
    #     parameters:

  sstable:
    column_index_size: 64kb
    flush:
      # compression: fast             # none, fast, table (default: table)
    compaction:
      replace_interval: 50mb  # large compactions will transfer reads to replacement file at this interval
      # snapshot_before: false
    trickle_fsync: false
    trickle_fsync_interval: 10240kb

data_integrity:
  corruption:
    # tombstone: disabled
  disk_failure:
    data: stop     # on data disk failure: die, stop, stop_paranoid, best_effort
    commit: stop   # on commit disk failure: die, stop, stop_commit, ignore

timeouts:
  # exchange: true        # peers use a coordinator's query timeout; disable if NTP unreliable
  reads: 5000ms
  range_reads: 10000ms
  writes: 2000ms
  counter_writes: 5000ms
  cas_contention: 1000ms
  truncates: 60000ms
  default: 10000ms
  # tcp_connect: 2000ms
  # tcp_user: 30000ms
  local_execution: 500ms    # slow query termination

limits:
  concurrency:
    reads: 32
    writes: 32
    counter_writes: 32
    # materialized_view_writes: 32
    clients: 128

    hint_delivery: 2
    # flush: 2          # Memtable flushes (default: 2 per data directory)
    # compaction: 1     # Compactions, excluding validation and repair (default: 2<=min(#disks,#cores)<=8)
    # repair: 0         # Number of simultaneous repair validations to allow
    # auto_sstable_upgrades: 1

  throughput:
    streaming:
      local: 25MiB/s
      remote: 25MiB/s
    batchlog: 1MiB/s            # total for node; peers receive proportional share
    compaction: 16MiB/s
    hint_delivery: 1MiB/s

  capacity:
    memtable:
      # heap: 2048mb
      # offheap: 2048mb

    repair:
      # merkle:

    caching:
      # compressed_chunks: 512MiB
      # key_index:
      # row_index: 2KiB
      # partitions: 0MiB
      # counters:
      # prepared_statements:
      # index_summaries:

    network:
      tcp:
        # send_buffer:
        # recv_buffer:
      connection:
        # send_queue: 4MiB
        # recv_queue: 4MiB
      endpoint:
        # send_queue: 128MiB
        # recv_queue: 128MiB
      global:
        # send_queue: 512MiB
        # recv_queue: 512MiB

  info:
    gc_pause: 200ms                   # time process is paused for GC

  warn:
    gc_pause: 1000ms                  # time process is paused for GC

    large_partition: 100mb
    tombstones: 1000
    batch_size: 5kb                   # multi-partition batch, logged or unlogged
    partitions_in_unlogged_batch: 10  #

  fail:
    tombstones: 100000                # number encountered serving a read
    batch_size: 50kb                  # multi-partition batch, logged or unlogged
    # corrupt_value_size: 256mb         # Maximum size of any value in data files; larger values will be treated as corruption.

caching:
  keys:
    row_index_limit: 2kb
    save_period: 4h
    # keys_to_save: 100
  chunk:
    # use_heap_if_exhausted: true
  rows:
    # class_name: org.apache.cassandra.cache.OHCProvider
    save_period: 0
    # keys_to_save: 100
  counters:
    save_period: 2h
    # keys_to_save: 100
  index_summaries:
    resample_interval: 1h

security:
  credentials:
    authenticator: AllowAllAuthenticator
    validity: 2000ms
    # update_interval: 2000ms

  permissions:
    authorizer: AllowAllAuthorizer
    validity: 2000ms
    # update_interval: 2000ms

  roles:
    manager: CassandraRoleManager
    validity: 2000ms
    # update_interval: 2000ms

system:
  windows_timer_interval: 1

features:
  # UDFs (user defined functions) are disabled by default.
  # As of Cassandra 3.0 there is a sandbox in place that should prevent execution of evil code.
  user_defined_functions_enabled: false

  # Enables scripted UDFs (JavaScript UDFs).
  # Java UDFs are always enabled, if user_defined_functions_enabled is true.
  # Enable this option to be able to use UDFs with "language javascript" or any custom JSR-223 provider.
  # This option has no effect, if user_defined_functions_enabled is false.
  scripted_user_defined_functions_enabled: false

  cdc:
    enabled: false
    # total_space: 4096mb
    # free_space_check_interval: 250ms
    # raw_directory: /var/lib/cassandra/cdc_raw

  # Diagnostic Events #
  # If enabled, diagnostic events can be helpful for troubleshooting operational issues. Emitted events contain details
  # on internal state and temporal relationships across events, accessible by clients via JMX.
  diagnostic_events_enabled: false

  # Audit logging - Logs every incoming CQL command request, authentication to a node. See the docs
  # on audit_logging for full details about the various configuration options.
  audit_logging_options:
    enabled: false
    logger:
      - class_name: BinAuditLogger
    # audit_logs_dir:
    # included_keyspaces:
    # excluded_keyspaces: system, system_schema, system_virtual_schema
    # included_categories:
    # excluded_categories:
    # included_users:
    # excluded_users:
    # roll_cycle: HOURLY
    # block: true
    # max_queue_weight: 268435456 # 256 MiB
    # max_log_size: 17179869184 # 16 GiB
    ## archive command is "/path/to/script.sh %path" where %path is replaced with the file being rolled:
    # archive_command:
    # max_archive_retries: 10

    # default options for full query logging - these can be overridden from command line when executing
    # nodetool enablefullquerylog
    #full_query_logging_options:
    # log_dir:
    # roll_cycle: HOURLY
    # block: true
    # max_queue_weight: 268435456 # 256 MiB
    # max_log_size: 17179869184 # 16 GiB
    ## archive command is "/path/to/script.sh %path" where %path is replaced with the file being rolled:
    # archive_command:
    # max_archive_retries: 10

  #########################
  # 6) EXPERIMENTAL FEATURES #
  #########################
  materialized_views:
    enabled: false

  # Enables SASI index creation on this node.
  # SASI indexes are considered experimental and are not recommended for production use.
  sasi_indexes:
    enabled: false

  transient_replication:
    # Enables creation of transiently replicated keyspaces on this node.
    # Transient replication is experimental and is not recommended for production use.
    enabled: false


# TODO

# Set to true to have Cassandra create a hard link to each sstable
# flushed or streamed locally in a backups/ subdirectory of the
# keyspace data.  Removing these links is the operator's
# responsibility.
incremental_backups: false



# TTL for different trace types used during logging of the repair process.
tracetype_query_ttl: 86400
tracetype_repair_ttl: 604800

#####################################
# Advanced automatic backup setting #
#####################################
# Whether or not a snapshot is taken of the data before keyspace truncation
# or dropping of column families. The STRONGLY advised default of true
# should be used to provide data safety. If you set this flag to false, you will
# lose data on truncation or drop.
auto_snapshot: true



# Use native transport TCP message coalescing. If on upgrade to 4.0 you found your throughput decreasing, and in
# particular you run an old kernel or have very fewer client connections, this option might be worth evaluating.
# native_transport_flush_in_batches_legacy: false

# Enable tracking of repaired state of data during reads and comparison between replicas
# Mismatches between the repaired sets of replicas can be characterized as either confirmed
# or unconfirmed. In this context, unconfirmed indicates that the presence of pending repair
# sessions, unrepaired partition tombstones, or some other condition means that the disparity
# cannot be considered conclusive. Confirmed mismatches should be a trigger for investigation
# as they may be indicative of corruption or data loss.
# There are separate flags for range vs partition reads as single partition reads are only tracked
# when CL > 1 and a digest mismatch occurs. Currently, range queries don't use digests so if
# enabled for range reads, all range reads will include repaired data tracking. As this adds
# some overhead, operators may wish to disable it whilst still enabling it for partition reads
repaired_data_tracking_for_range_reads_enabled: false
repaired_data_tracking_for_partition_reads_enabled: false
# If false, only confirmed mismatches will be reported. If true, a separate metric for unconfirmed
# mismatches will also be recorded. This is to avoid potential signal:noise issues are unconfirmed
# mismatches are less actionable than confirmed ones.
report_unconfirmed_repaired_data_mismatches: false

#####################################
# Advanced fault detection settings #
#####################################
# Track a metric per keyspace indicating whether replication achieved the ideal consistency
# level for writes without timing out. This is different from the consistency level requested by
# each write which may be lower in order to facilitate availability.
# ideal_consistency_level: EACH_QUORUM

# Automatically upgrade sstables after upgrade - if there is no ordinary compaction to do, the
# oldest non-upgraded sstable will get upgraded to the latest version
# automatic_sstable_upgrade: false
# Limit the number of concurrent sstable upgrades
# max_concurrent_automatic_sstable_upgrades: 1

# See http://wiki.apache.org/cassandra/HintedHandoff
hinted_handoff:
  # May either be "true" or "false" to enable globally
  enabled: true

  # When hinted_handoff_enabled is true, a black list of data centers that will not
  # perform hinted handoff
  # disabled_datacenters:
  #   - DC1
  #   - DC2

  # this defines the maximum amount of time a dead host will have hints
  # generated.  After it has been dead this long, new hints for it will not be
  # created until it has been seen alive and gone down again.
  max_hint_window: 10800000ms # 3 hours

  # How often hints should be flushed from the internal buffers to disk.
  # Will *not* trigger fsync.
  flush_period: 10000ms

  # Maximum size for a single hints file, in megabytes.
  max_hints_file_size: 128mb

  # Compression to apply to the hint files. If omitted, hints files
  # will be written uncompressed. LZ4, Snappy, and Deflate compressors
  # are supported.
  # compression:
  #   - class_name: LZ4Compressor
  #   parameters:
  #     -

########################
# 4) Advanced settings #
########################
# Enables encrypting data at-rest (on disk). Different key providers can be plugged in, but the default reads from
# a JCE-style keystore. A single keystore can hold multiple keys, but the one referenced by
# the "key_alias" is the only key that will be used for encrypt opertaions; previously used keys
# can still (and should!) be in the keystore and will be used on decrypt operations
# (to handle the case of key rotation).
#
# It is strongly recommended to download and install Java Cryptography Extension (JCE)
# Unlimited Strength Jurisdiction Policy Files for your version of the JDK.
# (current link: http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html)
#
# Currently, only the following file types are supported for transparent data encryption, although
# more are coming in future cassandra releases: commitlog, hints
transparent_data_encryption_options:
  enabled: false
  chunk_length_kb: 64
  cipher: AES/CBC/PKCS5Padding
  key_alias: testing:1
  # CBC IV length for AES needs to be 16 bytes (which is also the default size)
  # iv_length: 16
  key_provider:
    - class_name: org.apache.cassandra.security.JKSKeyProvider
      parameters:
        - keystore: conf/.keystore
          keystore_password: cassandra
          store_type: JCEKS
          key_password: cassandra

# SSL port, for legacy encrypted communication. This property is unused unless enabled in
# internode_encryption_options(see below). As of cassandra 4.0, this property is deprecated
# as a single port can be used for either/both secure and insecure connections.
# For security reasons, you should not expose this port to the internet. Firewall it if needed.
ssl_storage_port: 7001

