commands:
- name: Determine Tests to Run
  timeout: PT15M
  command: |
    set -x
    set -e
    set -o pipefail

    bash -c "find 'test/$CASSANDRA_TEST_KIND' -name '*Test.java' ${SPLIT_FILTER:-}" | sed "s;^test/$CASSANDRA_TEST_KIND/;;g" > "$PARALLEL_OUTPUT_DIR/splits"

- name: Run Tests (testclasslist)
  noOutputTimeout: PT15M
  command: |
    set -x
    #NOTE : set -e and pipefail were intentionally removed to make sure the copy commands at the end get executed even when tests fail

    # Have to explicitly ask for python3 even though installed.
    source /opt/rh/rh-python36/enable

    JAVA_VERSION=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | awk -F. '{print $1}')

    if [ "$JAVA_VERSION" -ge 11 ]; then
      export CASSANDRA_USE_JDK11=true
    fi

    # Extract test test.timeout from the yaml. testclasslist calls testlist which supplies
    # it for each class run.
    test_timeout=$(ant -f rio-build.xml show-properties | awk -F= "/ test.${CASSANDRA_TEST_KIND}.timeout=/ {print \$2}")
    if [ -z "$test_timeout" ]; then
      test_timeout=$(ant -f rio-build.xml show-properties | awk -F= "/ test.timeout=/ {print \$2}")
    fi

    # Compute a maximum time to allow ant to run so that the script has time to
    # save all of the output / logfiles generated by the run so far, otherwise Rio just kills the job
    # and drops everything.
    # Each class may run for up to test.timeout, so multiply number of tests
    # by the timeout in milliseconds, round up to the nearest minute and add five minutes for good
    # measure (integer division truncates so just add six) to give ant a chance to do timeout all by itself.
    # Add a final guard to make sure max wait is 160 minutes to be inside the 180 minutes currently
    # configured in Rio for job timeout.
    num_tests="$(wc -l < $PARALLEL_INPUT_DIR/input)"
    test_timeout_in_minutes="$(( ((num_tests * test_timeout) / 60000) + 6 ))"
    runner_timeout="$((test_timeout_in_minutes > 160 ? 160 : test_timeout_in_minutes))m"

    eval "${BEFORE_TEST:-}"
    timeout "${runner_timeout}" ant -f rio-build.xml testclasslist -Dtest.timeout="$test_timeout" -Dtest.classlistfile=$PARALLEL_INPUT_DIR/input  -Dtest.classlistprefix=$CASSANDRA_TEST_KIND
    rc=$?

    if [ -e build/test/output ]; then
      mkdir -p $PARALLEL_OUTPUT_DIR/build/test/output
      cp -r build/test/output/* $PARALLEL_OUTPUT_DIR/build/test/output/
    fi
    if [ -e build/test/logs ]; then
      mkdir -p $PARALLEL_OUTPUT_DIR/build/test/logs
      cp -r build/test/logs/* $PARALLEL_OUTPUT_DIR/build/test/logs/
    fi
    if [ "$rc" -eq 124 ] # exit code if timeout killed ant
    then
      echo "Faking skipped tests entry to guarantee failure after timeout"
      mkdir -p $PARALLEL_OUTPUT_DIR/build/test/output
      # Make sure to match the pattern expected in the parallel-tests-step.sh for checking junit xml files
      echo "<testsuite hostname=\"${K8S_PHYSICAL_NODE_NAME}\" name=\"timedout.${HOSTNAME}.timedout\" errors=\"1\" failures=\"0\" tests=\"1\"><testcase name=\"mappertimedout\" classname=\"so.sad.timed.out\" time=\"0.001\"><error type=\"timeout\"/></testcase></testsuite>" > "$PARALLEL_OUTPUT_DIR/build/test/output/TEST-${HOSTNAME}-timedout.xml"
    fi
    exit "$rc"
- name: Build dtest jar
  timeout: PT15M
  command: |
    set -x
    set -e
    set -o pipefail

    JAVA_VERSION=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | awk -F. '{print $1}')
    if [ "$JAVA_VERSION" -ge 11 ]; then
      export CASSANDRA_USE_JDK11=true
    fi
  
    # because the context filters out the build dir, the dtest jars are in dtest_jars directory
    # but currently they are required to be in build to be picked up; so copy there
    # TODO change behavior once (CASSANDRA-15489 - Allow end-user to configure dtest jar path) is in
    ant realclean
    mkdir build
    if [[ -e dtest_jars ]]; then
      cp dtest_jars/* build/
    fi

    rio/build-dtest-jar.sh
