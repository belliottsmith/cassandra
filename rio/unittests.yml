---
# yamllint disable rule:line-length
# yamllint disable rule:comments-indentation
schemaVersion: v1

# parallelci ignores variables it doesn't know, so safe to define these for reuse
shared:
  machine: &base-machine
    numberOfInstances: 1
    resources:
      cpu: 8
      cpuRequest: 4
      memory: 16Gi
    copyFromLocal:
      - src: ~/.m2/settings.xml
        dst: ~/.m2/settings.xml
    # don't care about the image, as long as the provided runtime is present
    runtime:
      java:
        - 11
    environment:
      - LANG: en_US.UTF-8
      # some tests can't run properly in circle ci, so they get skipped if this environment variable is set
      # these tests seem to also fail in k8s, so add this to cause those tests to get skipped
      # TODO - fix the tests =)
      - CIRCLECI: true
      - JAVA_TOOL_OPTIONS: '-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$PARALLEL_OUTPUT_DIR/ -XX:ErrorFile=$PARALLEL_OUTPUT_DIR/hs_err_pid_%p.log'
  commands:
    - &run-test-split
      name: Determine Tests to Run
      timeout: PT15M
      command: |
        set -x
        set -e
        set -o pipefail

        ### TEMPORARILY DISABLING distributed/upgrade tests
        find "test/$CASSANDRA_TEST_KIND" -name '*Test.java' | sed "s;^test/$CASSANDRA_TEST_KIND/;;g" | grep -v 'org/apache/cassandra/distributed/upgrade/' > "$PARALLEL_OUTPUT_DIR/splits"
    - &log-work
      name: Log Environment Information
      command: |
        echo '*** id ***'
        id
        echo '*** cat /proc/cpuinfo ***'
        cat /proc/cpuinfo
        echo '*** free -m ***'
        free -m
        echo '*** df -m ***'
        df -m
        echo '*** ifconfig -a ***'
        ifconfig -a
        echo '*** uname -a ***'
        uname -a
        echo '*** mount ***'
        mount
        echo '*** env ***'
        env
        echo '*** java ***'
        which java
        java -version
    # To help debugging, print out the splits so they are in the output tarball
    - &display-splits
      name: Display Splits
      noOutputTimeout: PT15M
      command: |
        cat $PARALLEL_INPUT_DIR/input
    # Run the tests
    - &run-tests
      name: Run Tests (testclasslist)
      timeout: PT150M
      noOutputTimeout: PT15M
      command: |
        set -x
        #NOTE : set -e and pipefail were intentionally removed to make sure the copy commands at the end get executed even when tests fail

        JAVA_VERSION=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | awk -F. '{print $1}')

        if [ "$JAVA_VERSION" -ge 11 ]; then
          export CASSANDRA_USE_JDK11=true
        fi

        # Extract test test.timeout from the yaml. testclasslist calls testlist which supplies
        # it for each class run.
        test_timeout=$(ant -f rio-build.xml show-properties | awk -F= "/ test.timeout=/ {print \$2}")

        # Compute a maximum time to allow ant to run so that the script has time to
        # save all of the output / logfiles generated by the run so far, otherwise Rio just kills the job
        # and drops everything.
        # Each class may run for up to test.timeout, so multiply number of tests
        # by the timeout in milliseconds, round up to the nearest minute and add five minutes for good
        # measure (integer division truncates so just add six) to give ant a chance to do timeout all by itself.
        # Add a final guard to make sure max wait is 160 minutes to be inside the 180 minutes currently
        # configured in Rio for job timeout.
        num_tests="$(wc -l $PARALLEL_INPUT_DIR/input)"
        test_timeout_in_minutes="$(( ((num_tests * test_timeout) / 60000) + 6 ))"
        runner_timeout="$((test_timeout_in_minutes > 160 ? 160 : test_timeout_in_minutes))m"

        timeout "${runner_timeout}" ant -f rio-build.xml testclasslist -Dtest.timeout="$test_timeout" -Dtest.classlistfile=$PARALLEL_INPUT_DIR/input  -Dtest.classlistprefix=$CASSANDRA_TEST_KIND
        rc=$?

        if [ -e build/test/output ]; then
          mkdir -p $PARALLEL_OUTPUT_DIR/build/test/output
          cp -r build/test/output/* $PARALLEL_OUTPUT_DIR/build/test/output/
        fi
        if [ -e build/test/logs ]; then
          mkdir -p $PARALLEL_OUTPUT_DIR/build/test/logs
          cp -r build/test/logs/* $PARALLEL_OUTPUT_DIR/build/test/logs/
        fi
        if [ "$rc" -eq 124 ] # exit code if timeout killed ant
        then
          echo Faking skipped tests entry to guarantee failure after timeout
          mkdir -p $PARALLEL_OUTPUT_DIR/build/test/output
          # Make sure to match the pattern expected in the parallel-tests-step.sh for checking junit xml files
          echo "<testsuite hostname=\"${K8S_PHYSICAL_NODE_NAME}\" name=\"timedout.${HOSTNAME}.timedout\" errors=\"1\" failures=\"0\" tests=\"1\"><testcase name=\"mappertimedout\" classname=\"so.sad.timed.out\" time=\"0.001\"><error type=\"timeout\"/></testcase></testsuite>" > "$PARALLEL_OUTPUT_DIR/build/test/output/TEST-${HOSTNAME}-timedout.xml"
        fi
        exit "$rc"

work:
  unit:
    machine:
      <<: *base-machine
      numberOfInstances: 100
    split:
      - <<: *run-test-split
        environment:
          CASSANDRA_TEST_KIND: unit
    map:
      - *log-work
      - *display-splits
      - <<: *run-tests
        environment:
          CASSANDRA_TEST_KIND: unit
  jvm-dtest:
    machine:
      <<: *base-machine
      # right now we don't have a lot of tests, so its fine to be a low number
      numberOfInstances: 2
    split:
      - <<: *run-test-split
        environment:
          CASSANDRA_TEST_KIND: distributed
    map:
      - *log-work
      - *display-splits
      - name: Build dtest jar
        timeout: PT15M
        command: |
          set -x
          set -e
          set -o pipefail

          JAVA_VERSION=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}' | awk -F. '{print $1}')
          if [ "$JAVA_VERSION" -ge 11 ]; then
            export CASSANDRA_USE_JDK11=true
          fi

          # because the context filters out the build dir, the dtest jars are in dtest_jars directory
          # but currently they are required to be in build to be picked up; so copy there
          # TODO change behavior once (CASSANDRA-15489 - Allow end-user to configure dtest jar path) is in
          mkdir build
          if [[ -e dtest_jars ]]; then
            cp dtest_jars/* build/
          fi

          ant -f rio-build.xml dtest-jar

      - <<: *run-tests
        environment:
          CASSANDRA_TEST_KIND: distributed

  # TODO - CASSANDRA_TEST_KIND: long, JAVA_TOOL_OPTIONS="-Dcassandra.ring_delay_ms=1000 -Dcassandra.tolerate_sstable_size=true"
  # TODO - CASSANDRA_TEST_KIND: burn
