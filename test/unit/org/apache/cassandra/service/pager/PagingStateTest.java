/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/
package org.apache.cassandra.service.pager;

import java.io.IOException;
import java.nio.ByteBuffer;

import org.junit.Test;

import org.apache.cassandra.config.CFMetaData;
import org.apache.cassandra.config.ColumnDefinition;
import org.apache.cassandra.cql3.ColumnIdentifier;
import org.apache.cassandra.db.*;
import org.apache.cassandra.db.rows.*;
import org.apache.cassandra.db.marshal.*;
import org.apache.cassandra.utils.ByteBufferUtil;

import static org.apache.cassandra.transport.Server.VERSION_3;
import static org.apache.cassandra.transport.Server.VERSION_4;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class PagingStateTest
{
    ByteBuffer pk = ByteBufferUtil.bytes("someKey");

    private PagingState makeSomePagingState(int protocolVersion)
    {
        return makeSomePagingState(protocolVersion, 0, false);
    }

    private PagingState makeSomePagingState(int protocolVersion, int remainingInPartition)
    {
        return makeSomePagingState(protocolVersion, remainingInPartition, false);
    }

    private PagingState makeSomePagingState(int protocolVersion, int remainingInPartition, boolean forceLegacy)
    {
        CFMetaData metadata = metadata();
        Row row = makeRow(metadata);
        PagingState.RowMark mark = PagingState.RowMark.create(metadata, row, protocolVersion, forceLegacy);
        return new PagingState(pk, mark, 10, remainingInPartition, forceLegacy);
    }

    private Row makeRow(CFMetaData metadata)
    {
        ColumnDefinition def = metadata.getColumnDefinition(new ColumnIdentifier("myCol", false));
        Clustering c = new Clustering(ByteBufferUtil.bytes("c1"), ByteBufferUtil.bytes(42));
        return BTreeRow.singleCellRow(c, BufferCell.live(metadata, def, 0, ByteBufferUtil.EMPTY_BYTE_BUFFER));
    }

    private CFMetaData metadata()
    {
        return CFMetaData.Builder.create("ks", "tbl")
                                 .addPartitionKey("k", AsciiType.instance)
                                 .addClusteringColumn("c1", AsciiType.instance)
                                 .addClusteringColumn("c1", Int32Type.instance)
                                 .addRegularColumn("myCol", AsciiType.instance)
                                 .build();
    }

    @Test
    public void testSerializationBackwardCompatibility()
    {
        /*
         * Tests that the serialized paging state for the native protocol V3 is backward compatible
         * with what old nodes generate. For that, it compares the serialized format to the hard-coded
         * value of the same state generated on a 2.1. For the curious, said hardcoded value has been
         * generated by the following code:
         *     ByteBuffer pk = ByteBufferUtil.bytes("someKey");
         *     CellName cn = CellNames.compositeSparse(new ByteBuffer[]{ ByteBufferUtil.bytes("c1"), ByteBufferUtil.bytes(42) },
         *                                             new ColumnIdentifier("myCol", false),
         *                                             false);
         *     PagingState state = new PagingState(pk, cn.toByteBuffer(), 10);
         *     System.out.println("PagingState = " + ByteBufferUtil.bytesToHex(state.serialize()));
         */
        PagingState state = makeSomePagingState(VERSION_3);

        String serializedState = ByteBufferUtil.bytesToHex(state.serialize(VERSION_3));
        // Note that we don't assert exact equality because we know 3.0 nodes include the "remainingInPartition" number
        // that is not present on 2.1/2.2 nodes. We know this is ok however because we know that 2.1/2.2 nodes will ignore
        // anything remaining once they have properly deserialized a paging state.
        assertTrue(serializedState.startsWith("0007736f6d654b65790014000263310000040000002a0000056d79636f6c000000000a"));
    }

    @Test
    public void testSerializeV3DeserializeV3()
    {
        PagingState state = makeSomePagingState(VERSION_3);
        ByteBuffer serialized = state.serialize(VERSION_3);
        assertEquals(serialized.remaining(), state.serializedSize(VERSION_3));
        assertEquals(state, PagingState.deserialize(serialized, VERSION_3));
    }

    @Test
    public void testSerializeV4DeserializeV4()
    {
        PagingState state = makeSomePagingState(VERSION_4);
        ByteBuffer serialized = state.serialize(VERSION_4);
        assertEquals(serialized.remaining(), state.serializedSize(VERSION_4));
        assertEquals(state, PagingState.deserialize(serialized, VERSION_4));
    }

    @Test
    public void testSerializeV3DeserializeV4()
    {
        PagingState state = makeSomePagingState(VERSION_3);
        ByteBuffer serialized = state.serialize(VERSION_3);
        assertEquals(serialized.remaining(), state.serializedSize(VERSION_3));
        assertEquals(state, PagingState.deserialize(serialized, VERSION_4));
    }

    @Test
    public void testSerializeV4DeserializeV3()
    {
        PagingState state = makeSomePagingState(VERSION_4);
        ByteBuffer serialized = state.serialize(VERSION_4);
        assertEquals(serialized.remaining(), state.serializedSize(VERSION_4));
        assertEquals(state, PagingState.deserialize(serialized, VERSION_3));
    }

    @Test
    public void testSerializeV3WithoutRemainingInPartitionDeserializeV3() throws IOException
    {
        PagingState state = makeSomePagingState(VERSION_3, Integer.MAX_VALUE);
        ByteBuffer serialized = state.legacySerialize(false);
        assertEquals(serialized.remaining(), state.legacySerializedSize(false));
        assertEquals(state, PagingState.deserialize(serialized, VERSION_3));
    }

    @Test
    public void testSerializeV3WithoutRemainingInPartitionDeserializeV4() throws IOException
    {
        PagingState state = makeSomePagingState(VERSION_3, Integer.MAX_VALUE);
        ByteBuffer serialized = state.legacySerialize(false);
        assertEquals(serialized.remaining(), state.legacySerializedSize(false));
        assertEquals(state, PagingState.deserialize(serialized, VERSION_4));
    }

    @Test
    public void testRoundTripWithForcedLegacySerialization() throws IOException
    {
        CFMetaData metadata = metadata();
        Row row = makeRow(metadata);

        PagingState.RowMark mark = PagingState.RowMark.create(metadata, row, VERSION_4, true);
        PagingState state = new PagingState(pk, mark, 10, 0, true);
        ByteBuffer serialized = state.serialize(VERSION_4);

        // Even though the protocol version specified for the serialization was V4, the force legacy
        // flag was set on both the state and row mark, so we should be able to deserialize this as a V3 state
        assertTrue(PagingState.isLegacySerialized(serialized));
        PagingState roundTripped = PagingState.deserialize(serialized, VERSION_3);
        assertEquals(state, roundTripped);
        assertEquals(state.rowMark.clustering(metadata), roundTripped.rowMark.clustering(metadata));
    }

    @Test
    public void forceLegacySerializationIfRowMarkIsV3() throws IOException
    {
        // Handles the case where the force legacy flag is set to true in between the construction
        // of the RowMark and its enclosing PagingState. The serialization of the PagingState must
        // always match that of the RowMark. In this case that's V3, having been overridden by the
        // force legacy flag when the RowMark was created.
        CFMetaData metadata = metadata();
        Row row = makeRow(metadata);
        // Force legacy is true
        PagingState.RowMark mark = PagingState.RowMark.create(metadata, row, VERSION_4, true);
        // Force legacy is false
        PagingState state = new PagingState(pk, mark, 10, 0, false);
        // serializing for a V4 connection should still use the V3 format because of the RowMark
        ByteBuffer serialized = state.serialize(VERSION_4);
        assertTrue(PagingState.isLegacySerialized(serialized));
        PagingState roundTripped = PagingState.deserialize(serialized, VERSION_3);
        assertEquals(state, roundTripped);
        assertEquals(state.rowMark.clustering(metadata), roundTripped.rowMark.clustering(metadata));
    }

    @Test
    public void ignoreForceLegacyFlagIfRowMarkIsV4() throws IOException
    {
        // Handles the case where the force legacy flag is set to true in between the construction
        // of the RowMark and its enclosing PagingState. The serialization of the PagingState must
        // always match that of the RowMark, so in this case we must ignore the flag and serialize
        // the PagingState for V4.
        // In practical terms, this shouldn't be an issue as we'll enable the option in yaml to
        // ensure it's in place from startup. The hot property is only intended to be used for
        // disabling the feature once a rolling upgrade is complete. Also, if enabling on a
        // running system, the result would be indistinguishable from a PagingState fully
        // constructed before the flag was flipped.
        CFMetaData metadata = metadata();
        Row row = makeRow(metadata);
        // Force legacy is false
        PagingState.RowMark mark = PagingState.RowMark.create(metadata, row, VERSION_4, false);
        // Force legacy is true
        PagingState state = new PagingState(pk, mark, 10, 0, true);
        // serializing for a V4 connection should actually use that format despite the override flag
        ByteBuffer serialized = state.serialize(VERSION_4);
        assertFalse(PagingState.isLegacySerialized(serialized));
        PagingState roundTripped = PagingState.deserialize(serialized, VERSION_4);
        assertEquals(state, roundTripped);
        assertEquals(state.rowMark.clustering(metadata), roundTripped.rowMark.clustering(metadata));
    }

    @Test
    public void forceLegacySerializationWithNullRowMark() throws IOException
    {
        PagingState state = new PagingState(pk, null, 10, 0, true);
        // serializing for a V4 connection should use the V3 format due to the override flag
        ByteBuffer serialized = state.serialize(VERSION_4);
        assertTrue(PagingState.isLegacySerialized(serialized));
        PagingState roundTripped = PagingState.deserialize(serialized, VERSION_3);
        assertEquals(state, roundTripped);
    }
}
